/*
 * mundicoreapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 01/02/2017
 */
package plans_pkg


import(
	"encoding/json"
	"mundicoreapi_lib/models_pkg"
	"github.com/apimatic/unirest-go"
	"mundicoreapi_lib"
	"mundicoreapi_lib/apihelper_pkg"
)
/*
 * Client structure as interface implementation
 */
type PLANS_IMPL struct { }

/**
 * <table>  <thead>    <tr>      <th>Campo</th>      <th>Tipo</th>      <th>Descrição</th>    </tr>  </thead>  <tbody>    <tr>      <td><code>name</code> [obrigatório]</td>      <td>string(64)</td>      <td>Nome</td>    </tr>    <tr>      <td><code>pricing_scheme</code> [obrigatório]</td>      <td>object</td>      <td>Esquema de precificação. Leia mais sobre <a href="#pricing">precificação</a></td>    </tr>    <tr>      <td><code>cycles</code></td>      <td>integer</td>      <td>Indica quantas vezes o item será cobrado. Caso não seja informado, o item será cobrado até que seja excluído o desativado.      </td>    </tr>    <tr>      <td><code>description</code></td>      <td>string(256)</td>      <td>Descrição</td>    </tr>    <tr>      <td><code>quantity</code></td>      <td>integer</td>      <td>Quantidade de itens</td>    </tr>  </tbody></table>
 * @param    *models_pkg.CreatePlanItemRequest        body        parameter: Required
 * @param    string                                   planId      parameter: Required
 * @return	Returns the *models_pkg.GetPlanItemResponse response from the API call
 */
func (me *PLANS_IMPL) CreatePlanItem (
            body *models_pkg.CreatePlanItemRequest,
            planId string) (*models_pkg.GetPlanItemResponse, error) {
        //the base uri for api requests
    _queryBuilder := mundicoreapi_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/plans/{plan_id}/items"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "plan_id" : planId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, body, mundicoreapi_lib.Config.BasicAuthUserName, mundicoreapi_lib.Config.BasicAuthPassword)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Requisição inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("Chave de API inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("O recurso solicitado não existe", _response.Code, _response.RawBody)
    } else if (_response.Code == 412) {
        err = apihelper_pkg.NewAPIError("Parâmetros válidos mas a requisição falhou", _response.Code, _response.RawBody)
    } else if (_response.Code == 422) {
        err = apihelper_pkg.NewAPIError("Parâmetros inválidos", _response.Code, _response.RawBody)
    } else if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Ocorreu um erro interno", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.GetPlanItemResponse = &models_pkg.GetPlanItemResponse{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    string                                   planId           parameter: Required
 * @param    string                                   planItemId       parameter: Required
 * @param    *models_pkg.UpdatePlanItemRequest        body             parameter: Required
 * @return	Returns the *models_pkg.GetPlanItemResponse response from the API call
 */
func (me *PLANS_IMPL) UpdatePlanItem (
            planId string,
            planItemId string,
            body *models_pkg.UpdatePlanItemRequest) (*models_pkg.GetPlanItemResponse, error) {
        //the base uri for api requests
    _queryBuilder := mundicoreapi_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/plans/{plan_id}/items/{plan_item_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "plan_id" : planId,
        "plan_item_id" : planItemId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.PutWithAuth(_queryBuilder, headers, body, mundicoreapi_lib.Config.BasicAuthUserName, mundicoreapi_lib.Config.BasicAuthPassword)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Requisição inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("Chave de API inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("O recurso solicitado não existe", _response.Code, _response.RawBody)
    } else if (_response.Code == 412) {
        err = apihelper_pkg.NewAPIError("Parâmetros válidos mas a requisição falhou", _response.Code, _response.RawBody)
    } else if (_response.Code == 422) {
        err = apihelper_pkg.NewAPIError("Parâmetros inválidos", _response.Code, _response.RawBody)
    } else if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Ocorreu um erro interno", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.GetPlanItemResponse = &models_pkg.GetPlanItemResponse{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    string        planId      parameter: Required
 * @return	Returns the *models_pkg.GetPlanResponse response from the API call
 */
func (me *PLANS_IMPL) DeletePlan (
            planId string) (*models_pkg.GetPlanResponse, error) {
        //the base uri for api requests
    _queryBuilder := mundicoreapi_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/plans/{plan_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "plan_id" : planId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.DeleteWithAuth(_queryBuilder, headers, mundicoreapi_lib.Config.BasicAuthUserName, mundicoreapi_lib.Config.BasicAuthPassword)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Requisição inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("Chave de API inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("O recurso solicitado não existe", _response.Code, _response.RawBody)
    } else if (_response.Code == 412) {
        err = apihelper_pkg.NewAPIError("Parâmetros válidos mas a requisição falhou", _response.Code, _response.RawBody)
    } else if (_response.Code == 422) {
        err = apihelper_pkg.NewAPIError("Parâmetros inválidos", _response.Code, _response.RawBody)
    } else if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Ocorreu um erro interno", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.GetPlanResponse = &models_pkg.GetPlanResponse{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * <p>Utilize os parâmetros <code>page</code> e <code>size</code> para paginar o resultado. Leia mais sobre <a href="#pagination">paginação</a></p>
 * @return	Returns the interface{} response from the API call
 */
func (me *PLANS_IMPL) ListPlans () (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := mundicoreapi_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/plans"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.GetWithAuth(_queryBuilder, headers, mundicoreapi_lib.Config.BasicAuthUserName, mundicoreapi_lib.Config.BasicAuthPassword)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Requisição inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("Chave de API inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("O recurso solicitado não existe", _response.Code, _response.RawBody)
    } else if (_response.Code == 412) {
        err = apihelper_pkg.NewAPIError("Parâmetros válidos mas a requisição falhou", _response.Code, _response.RawBody)
    } else if (_response.Code == 422) {
        err = apihelper_pkg.NewAPIError("Parâmetros inválidos", _response.Code, _response.RawBody)
    } else if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Ocorreu um erro interno", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    string        planId           parameter: Required
 * @param    string        planItemId       parameter: Required
 * @return	Returns the *models_pkg.GetPlanItemResponse response from the API call
 */
func (me *PLANS_IMPL) DeletePlanItem (
            planId string,
            planItemId string) (*models_pkg.GetPlanItemResponse, error) {
        //the base uri for api requests
    _queryBuilder := mundicoreapi_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/plans/{plan_id}/items/{plan_item_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "plan_id" : planId,
        "plan_item_id" : planItemId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.DeleteWithAuth(_queryBuilder, headers, mundicoreapi_lib.Config.BasicAuthUserName, mundicoreapi_lib.Config.BasicAuthPassword)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Requisição inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("Chave de API inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("O recurso solicitado não existe", _response.Code, _response.RawBody)
    } else if (_response.Code == 412) {
        err = apihelper_pkg.NewAPIError("Parâmetros válidos mas a requisição falhou", _response.Code, _response.RawBody)
    } else if (_response.Code == 422) {
        err = apihelper_pkg.NewAPIError("Parâmetros inválidos", _response.Code, _response.RawBody)
    } else if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Ocorreu um erro interno", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.GetPlanItemResponse = &models_pkg.GetPlanItemResponse{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    string        planId      parameter: Required
 * @return	Returns the *models_pkg.GetPlanResponse response from the API call
 */
func (me *PLANS_IMPL) GetPlan (
            planId string) (*models_pkg.GetPlanResponse, error) {
        //the base uri for api requests
    _queryBuilder := mundicoreapi_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/plans/{plan_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "plan_id" : planId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.GetWithAuth(_queryBuilder, headers, mundicoreapi_lib.Config.BasicAuthUserName, mundicoreapi_lib.Config.BasicAuthPassword)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Requisição inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("Chave de API inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("O recurso solicitado não existe", _response.Code, _response.RawBody)
    } else if (_response.Code == 412) {
        err = apihelper_pkg.NewAPIError("Parâmetros válidos mas a requisição falhou", _response.Code, _response.RawBody)
    } else if (_response.Code == 422) {
        err = apihelper_pkg.NewAPIError("Parâmetros inválidos", _response.Code, _response.RawBody)
    } else if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Ocorreu um erro interno", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.GetPlanResponse = &models_pkg.GetPlanResponse{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    string        planId           parameter: Required
 * @param    string        planItemId       parameter: Required
 * @return	Returns the *models_pkg.GetPlanItemResponse response from the API call
 */
func (me *PLANS_IMPL) GetPlanItem (
            planId string,
            planItemId string) (*models_pkg.GetPlanItemResponse, error) {
        //the base uri for api requests
    _queryBuilder := mundicoreapi_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/plans/{plan_id}/items/{plan_item_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "plan_id" : planId,
        "plan_item_id" : planItemId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.GetWithAuth(_queryBuilder, headers, mundicoreapi_lib.Config.BasicAuthUserName, mundicoreapi_lib.Config.BasicAuthPassword)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Requisição inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("Chave de API inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("O recurso solicitado não existe", _response.Code, _response.RawBody)
    } else if (_response.Code == 412) {
        err = apihelper_pkg.NewAPIError("Parâmetros válidos mas a requisição falhou", _response.Code, _response.RawBody)
    } else if (_response.Code == 422) {
        err = apihelper_pkg.NewAPIError("Parâmetros inválidos", _response.Code, _response.RawBody)
    } else if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Ocorreu um erro interno", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.GetPlanItemResponse = &models_pkg.GetPlanItemResponse{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    string        planId      parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *PLANS_IMPL) GetPlanSubscriptions (
            planId string) (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := mundicoreapi_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/plans/{plan_id}/subscriptions"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "plan_id" : planId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.GetWithAuth(_queryBuilder, headers, mundicoreapi_lib.Config.BasicAuthUserName, mundicoreapi_lib.Config.BasicAuthPassword)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Requisição inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("Chave de API inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("O recurso solicitado não existe", _response.Code, _response.RawBody)
    } else if (_response.Code == 412) {
        err = apihelper_pkg.NewAPIError("Parâmetros válidos mas a requisição falhou", _response.Code, _response.RawBody)
    } else if (_response.Code == 422) {
        err = apihelper_pkg.NewAPIError("Parâmetros inválidos", _response.Code, _response.RawBody)
    } else if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Ocorreu um erro interno", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * TODO: type endpoint description here
 * @param    string        planId      parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *PLANS_IMPL) GetPlanItems (
            planId string) (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := mundicoreapi_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/plans/{plan_id}/items"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "plan_id" : planId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.GetWithAuth(_queryBuilder, headers, mundicoreapi_lib.Config.BasicAuthUserName, mundicoreapi_lib.Config.BasicAuthPassword)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Requisição inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("Chave de API inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("O recurso solicitado não existe", _response.Code, _response.RawBody)
    } else if (_response.Code == 412) {
        err = apihelper_pkg.NewAPIError("Parâmetros válidos mas a requisição falhou", _response.Code, _response.RawBody)
    } else if (_response.Code == 422) {
        err = apihelper_pkg.NewAPIError("Parâmetros inválidos", _response.Code, _response.RawBody)
    } else if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Ocorreu um erro interno", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * <table>  <thead>    <tr>      <th>Campo</th>      <th>Tipo</th>      <th>Descrição</th>    </tr>  </thead>  <tbody>    <tr>      <td><code>name</code> [obrigatório]</td>      <td>string(64)</td>      <td>Nome</td>    </tr>    <tr>      <td><code>status</code> [obrigatório]</td>      <td>enum</td>      <td>**active** ou **inactive**</td>    </tr>    <tr>      <td><code>interval</code> [obrigatório]</td>      <td>enum</td>      <td><strong>week</strong>, <strong>month</strong>, <strong>year</strong></td>    </tr>    <tr>      <td><code>interval_count</code> [obrigatório]</td>      <td>integer</td>      <td>Repetições do intervalo</td>    </tr>    <tr>      <td><code>currency</code> [obrigatório]</td>      <td>enum</td>      <td><strong>BRL</strong></td>    </tr>    <tr>      <td><code>payment_methods</code> [obrigatório]</td>      <td>array of strings</td>      <td><strong>credit_card</strong> ou <strong>boleto</strong></td>    </tr>    <tr>      <td><code>billing_type</code> [obrigatório]</td>      <td>enum</td>      <td><strong>prepaid</strong>, <strong>postpaid</strong> ou <strong>exact_day</strong></td>    </tr>    <tr>      <td><code>billing_days</code></td>      <td>array of integers</td>      <td>Dias disponíveis para cobrança. Obrigatório caso `billing_type` seja **exact_day**</td>    </tr>    <tr>      <td><code>description</code></td>      <td>string(256)</td>      <td>Descrição</td>    </tr>    <tr>      <td><code>installments</code></td>      <td>array of integers</td>      <td>Parcelas disponíveis</td>    </tr>    <tr>      <td><code>statement_descriptor</code></td>      <td>string(22)</td>      <td>Texto exibido na fatura do cartão</td>    </tr>    <tr>      <td><code>trial_period_days</code></td>      <td>integer</td>      <td>Dias para início das assinaturas</td>    </tr>    <tr>      <td><code>shippable</code></td>      <td>boolean</td>      <td>Indica se o plano oferece entrega</td>    </tr>    <tr>      <td><code>metadata</code></td>      <td>object</td>      <td>Informações adicionais sobre o plano. Leia mais sobre [metadata](#metadata)</td>    </tr>  </tbody></table>
 * @param    *models_pkg.UpdatePlanRequest        body        parameter: Required
 * @param    string                               planId      parameter: Required
 * @return	Returns the *models_pkg.GetPlanResponse response from the API call
 */
func (me *PLANS_IMPL) UpdatePlan (
            body *models_pkg.UpdatePlanRequest,
            planId string) (*models_pkg.GetPlanResponse, error) {
        //the base uri for api requests
    _queryBuilder := mundicoreapi_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/plans/{plan_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "plan_id" : planId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.PutWithAuth(_queryBuilder, headers, body, mundicoreapi_lib.Config.BasicAuthUserName, mundicoreapi_lib.Config.BasicAuthPassword)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Requisição inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("Chave de API inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("O recurso solicitado não existe", _response.Code, _response.RawBody)
    } else if (_response.Code == 412) {
        err = apihelper_pkg.NewAPIError("Parâmetros válidos mas a requisição falhou", _response.Code, _response.RawBody)
    } else if (_response.Code == 422) {
        err = apihelper_pkg.NewAPIError("Parâmetros inválidos", _response.Code, _response.RawBody)
    } else if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Ocorreu um erro interno", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.GetPlanResponse = &models_pkg.GetPlanResponse{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * <table>  <thead>    <tr>      <th>Campo</th>      <th>Tipo</th>      <th>Descrição</th>    </tr>  </thead>  <tbody>    <tr>      <td><code>name</code> [obrigatório]</td>      <td>string(64)</td>      <td>Nome</td>    </tr>    <tr>      <td><code>interval</code> [obrigatório]</td>      <td>enum</td>      <td><strong>week</strong>, <strong>month</strong>, <strong>year</strong>. O padrão é **month**</td>    </tr>     <tr>      <td><code>interval_count</code> [obrigatório]</td>      <td>integer</td>      <td>Repetições do intervalo. O padrão é **1**</td>    </tr>    <tr>      <td><code>currency</code> [obrigatório]</td>      <td>enum</td>      <td><strong>BRL</strong></td>    </tr>    <tr>      <td><code>payment_methods</code> [obrigatório]</td>      <td>array of strings</td>      <td><strong>credit_card</strong> ou <strong>boleto</strong>. O padrão é **credit_card**</td>    </tr>    <tr>      <td><code>items</code> [obrigatório]</td>      <td>array of objects</td>      <td>Itens. Leia mais sobre <a href="#">item do plano</a></td>    </tr>    <tr>      <td><code>billing_type</code> [obrigatório]</td>      <td>enum</td>      <td><strong>prepaid</strong>, <strong>postpaid</strong> ou <strong>exact_day</strong>. O padrão é **prepaid**</td>    </tr>    <tr>      <td><code>billing_days</code></td>      <td>array of integers</td>      <td>Dias disponíveis para cobrança. Obrigatório caso `billing_type` seja **exact_day**</td>    </tr>    <tr>      <td><code>description</code></td>      <td>string(256)</td>      <td>Descrição</td>    </tr>    <tr>      <td><code>installments</code></td>      <td>array of integers</td>      <td>Parcelas disponíveis. O padrão é **1**</td>    </tr>    <tr>      <td><code>statement_descriptor</code></td>      <td>string(22)</td>      <td>Texto exibido na fatura do cartão</td>    </tr>    <tr>      <td><code>shippable</code></td>      <td>boolean</td>      <td>Indica se o plano oferece entrega. O padrão é **false**</td>    </tr>    <tr>      <td><code>trial_period_days</code></td>      <td>integer</td>      <td>Dias para início das assinaturas</td>    </tr>    <tr>      <td><code>metadata</code></td>      <td>object</td>      <td>Informações adicionais sobre o plano. Leia mais sobre [metadata](#metadata)</td>    </tr>  </tbody></table><h5>Exemplo pré-pago</h5>```{    "name": "Premium",    "description": "Vá de Premium. E seja feliz!",    "statement_descriptor": "Spotify",    "billing_type": "prepaid",    "items": [        {            "name": "Premium",            "pricing_scheme": {                "price": 1490            }        }    ]}```<h5>Exemplo pós-pago</h5><blockquote><p><strong>Precificação</strong></p><p>Existem opções flexíveis para precificar seus planos. Leia mais sobre <a href="#pricing">precificação</a></p></blockquote>```{    "name": "SMS",    "description": "De pequenas a grandes empresas: o SMS traz mais resultados para o seu negócio",    "payment_methods": [ "credit_card", "boleto" ],    "statement_descriptor": "Operadora",    "billing_type": "postpaid",    "pricing_scheme": {        "scheme_type": "volume",        "price_brackets": [            {                "end_quantity": 100,                "price": 14            },            {                "start_quantity": 101,                "end_quantity": 1000,                "price": 12,                "overage_price": 9            }        ]    }}```<blockquote><p><strong>Simples</strong></p><p>Criar planos com apenas um item pode ser mais simples. Você pode enviar os campos <code>cycles</code>, <code>pricing_scheme</code> e <code>quantity</code> na raiz da requisição.</p></blockquote>```{    "name": "Premium",    "description": "Vá de Premium. E seja feliz!",    "pricing_scheme": {        "price": 1490    }}```
 * @param    *models_pkg.CreatePlanRequest        body     parameter: Required
 * @return	Returns the *models_pkg.GetPlanResponse response from the API call
 */
func (me *PLANS_IMPL) CreatePlan (
            body *models_pkg.CreatePlanRequest) (*models_pkg.GetPlanResponse, error) {
        //the base uri for api requests
    _queryBuilder := mundicoreapi_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/plans"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, body, mundicoreapi_lib.Config.BasicAuthUserName, mundicoreapi_lib.Config.BasicAuthPassword)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Requisição inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("Chave de API inválida", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("O recurso solicitado não existe", _response.Code, _response.RawBody)
    } else if (_response.Code == 412) {
        err = apihelper_pkg.NewAPIError("Parâmetros válidos mas a requisição falhou", _response.Code, _response.RawBody)
    } else if (_response.Code == 422) {
        err = apihelper_pkg.NewAPIError("Parâmetros inválidos", _response.Code, _response.RawBody)
    } else if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Ocorreu um erro interno", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.GetPlanResponse = &models_pkg.GetPlanResponse{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

